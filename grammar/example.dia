def f(x: int, y: int ^ {x, y, <>}) =
  val a = 3+fo0;
  x && y

def id(z: ref(int)^♦, n: int): int^{z, ♦} = x

def polyId[T](x: T): T = x

def polyId[T <: Top](x: T): T = x

def polyId[T^z <: Top^<>](x: T^<>): T^x =  x

val _ = polyId[ref(int)^<>](alloc(0));
val x = alloc@(0);
val g = lam f(g: g(zz: ref(int)^x, int, w: unit) => int) { g(0) };
val f = lam f(g: g(zz: ref(int)^x, int, w: unit) => int): int^{x} { g(0) };
val _ = ! x;
val z = ! (ref x) + 3;
z

def f2[T^z <: Top^<>](x: T^<>): T^x =
  val f1 = lam(x: T): T { x };
  val f2 = Lam g[A]: Int { x + 5 };
  val f3 = Lam [A^a <: Top^<>, B^b <: Top^<>]: (A) => B { lam(x: A) { x } };
  x + 5
