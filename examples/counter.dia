def makePair[A^a <: Top^<>, B^b <: Top^{a, <>}](x: A^a, y: B^b) = {
  p[C^c <: Top]: (f((x: A^<>, y: B^{x, <>}) => C^{x, y}) => C^f)^p => {
    f(h: (x: A^<>, y: B^{x, <>}) => C^{x, y}): C^f => { h(x, y) }
  }
};
def fst[A^a <: Top^<>, B^b <: Top^{a, <>}](p: (forall p[C^c <: Top] => (f((x: A^<>, y: B^{x, <>}) => C^{x, y}) => C^f)^p)^{a, b}) = {
  p[A]((x: A^<>, y: B^{x, <>}) => { x })
};
def snd[A^a <: Top^<>, B^b <: Top^{a, <>}](p: (forall p[C^c <: Top] => (f((x: A^<>, y: B^{x, <>}) => C^{x, y}) => C^f)^p)^{a, b}) = {
  p[B]((x: A^<>, y: B^{x, <>}) => { y })
};

def counter(n: Int) = {
  val x = Ref n;
  val inc = () => { x := (! x) + 1 };
  val dec = () => { x := (! x) - 1 };
  makePair[(() => Unit)^x][(() => Unit)^x](inc)(dec)
};
val p = counter(0);
val inc = fst[(() => Unit)^p][(() => Unit)^p](p);
val dec = snd[(() => Unit)^p][(() => Unit)^p](p);
inc()
